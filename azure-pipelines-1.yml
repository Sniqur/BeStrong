trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - '*'

variables:
    - group: AzCred

stages:
- stage: Terraform
  displayName: "Terraform Pipeline"
  jobs:
  - job: terraform
    displayName: "Terraform Job"
    pool:
      vmImage: 'ubuntu-latest'
             
    
    steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'

      # Install Terraform manually
      - task: Bash@3
        displayName: "Install Terraform"
        inputs:
          targetType: 'inline'
          script: |
            T_VERSION="0.13.0"
            curl -O https://releases.hashicorp.com/terraform/${T_VERSION}/terraform_${T_VERSION}_linux_amd64.zip
            unzip terraform_${T_VERSION}_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version
      

      - task: Bash@3
        displayName: "Azure Login"
        inputs:
          azureSubscription:  'AzureConnect'
          scriptType: bash
          targetType: 'inline'
          inlineScript: |
          
            cd $(System.DefaultWorkingDirectory)  # Navigate to the default working directory
            az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
            az account set --subscription $(AZURE_SUBSCRIPTION_ID)
            az account show  # This verifies the login session

      - task: Bash@3
        displayName: "Terraform Format"
        inputs:
          targetType: 'inline'
          script: |
            terraform fmt -check
        continueOnError: true

      - task: Bash@3
        displayName: "Terraform Init"
        inputs:
          targetType: 'inline'
          script: |
            terraform init

      - task: Bash@3
        displayName: "Terraform Validate"
        inputs:
          targetType: 'inline'
          script: |
            terraform validate -no-color

      - task: Bash@3
        displayName: "Terraform Plan"
        inputs:
          targetType: 'inline'
          script: |
            terraform plan -no-color
        condition: eq(variables['Build.Reason'], 'PullRequest')
        continueOnError: true

      - task: Bash@3
        displayName: "Post Plan Comment"
        inputs:
          targetType: 'inline'
          script: |
            echo "#### Terraform Format and Style: $(terraform fmt -check)"
            echo "#### Terraform Initialization: $(terraform init)"
            echo "#### Terraform Validation: $(terraform validate)"
            echo "#### Terraform Plan: $(terraform plan)"
            # Add more detailed logging or custom comments if needed.

      - task: Bash@3
        displayName: "Terraform Plan Status"
        condition: failed()
        inputs:
          targetType: 'inline'
          script: |
            echo "Terraform Plan failed"
            exit 1

      - task: Bash@3
        displayName: "Terraform Apply"
        inputs:
          targetType: 'inline'
          script: |
            terraform apply -auto-approve
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Manual'))

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - 'main'

variables:
      - group: AzCred


stages:
- stage: Terraform
  displayName: "Terraform Pipeline"
  jobs:
  - job: terraform
    displayName: "Terraform Job"
    pool:
      vmImage: 'ubuntu-latest'
             
    
    
    steps:
      - checkout: self

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'

      - task: Bash@3
        displayName: "Install Azure CLI on Ubuntu"
        inputs:
          targetType: 'inline'
          script: |
              # Update package lists and install Azure CLI
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              # Verify installation
              az --version

      # Install Terraform manually
      - task: Bash@3
        displayName: "Install Terraform"
        inputs:
          targetType: 'inline'
          script: |
            T_VERSION="1.9.8"
            curl -O https://releases.hashicorp.com/terraform/${T_VERSION}/terraform_${T_VERSION}_linux_amd64.zip
            unzip terraform_${T_VERSION}_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version
      

      - task: Bash@3
        displayName: "Azure Login"
        inputs:
          azureSubscription:  'AzureConnect'
          scriptType: bash
          targetType: 'inline'
          Script: |
              az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
              az account set --subscription $(ARM_SUBSCRIPTION_ID)
              az account show  # This verifies the login session
          
            
      - task: Bash@3
        displayName: "Terraform Format"
        inputs:
          azureSubscription:  'AzureConnect'
          targetType: 'inline'
          script: |
            terraform fmt -check
        continueOnError: true

      - task: Bash@3
        displayName: "Init"
        inputs:
          targetType: 'inline'
          script: |
               terraform init
               echo "TF_VAR_sql_admin_user is set to: $TF_VAR_sql_admin_user"
        env:
            TF_VAR_sql_admin_user: $(TF_VAR_sql_admin_user)
            TF_VAR_sql_admin_password: $(TF_VAR_sql_admin_password)


      - task: Bash@3
        displayName: "Terraform Validate"
        inputs:
          azureSubscription:  'AzureConnect'
          scriptType: bash
          targetType: 'inline'
          script: | 
            terraform validate -no-color 

      # - task: Bash@3
      #   displayName: "Run Terraform Plan and Capture Lock Info"
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       PLAN_OUTPUT=$(terraform plan -no-color 2>&1)
      #       echo "$PLAN_OUTPUT" | grep "Lock Info" && echo "$PLAN_OUTPUT" > lock_info.log


      # - task: Bash@3
      #   displayName: "Extract Lock ID and Force Unlock"
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       if [ -f lock_info.log ]; then
      #         LOCK_ID=$(grep -A1 "Lock Info" lock_info.log | grep "ID:" | awk '{print $2}')
      #         if [ -n "${LOCK_ID}" ]; then
      #           echo "Force unlocking with Lock ID: ${LOCK_ID}"
      #           echo "yes" | terraform force-unlock "${LOCK_ID}"
      #         else
      #           echo "No Lock ID found."
      #         fi
      #       else
      #         echo "No lock detected; proceeding without unlock."
      #       fi




      - task: Bash@3
        displayName: "Terraform Plan"
        inputs:
          azureSubscription:  'AzureConnect'
          scriptType: bash
          targetType: 'inline'
          script: |
        
            terraform plan -no-color -input=false
        env:
            TF_VAR_sql_admin_user: $(TF_VAR_sql_admin_user)
            TF_VAR_sql_admin_password: $(TF_VAR_sql_admin_password)
        # condition: eq(variables['Build.Reason'], 'PullRequest')
        continueOnError: true

      # - task: Bash@3
      #   displayName: "Post Plan Comment"
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       echo "#### Terraform Format and Style: $(terraform fmt -check)"
      #       echo "#### Terraform Initialization: $(terraform init)"
      #       echo "#### Terraform Validation: $(terraform validate)"
      #       # Add more detailed logging or custom comments if needed.

      # - task: Bash@3
      #   displayName: "Terraform Plan Status"
      #   condition: failed()
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       echo "Terraform Plan failed"
      #       exit 1

      # - task: Bash@3
      #   displayName: "Terraform Apply"
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       terraform apply -auto-approve -input=false
      #   env:
      #       TF_VAR_sql_admin_user: $(TF_VAR_sql_admin_user)
      #       TF_VAR_sql_admin_password: $(TF_VAR_sql_admin_password)
      #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Manual'))
        
